version: 2
jobs:
  build:
    docker:
      # Build in Python container to install AWS CLI
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/Ankr-network/dccn-es-api
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install AWSCLI
          command: |
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip 
            sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - run:
          name: "Log in to AWS ECR"
          command:
            eval $(aws ecr get-login --no-include-email --region us-west-2)
      - run:
          name: Install Kops and Kubectl
          command: |
            wget -O kops https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
            chmod +x ./kops
            sudo mv ./kops /usr/local/bin/kops
            wget -O kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: "Build & Push Docker Image"
          command: |
            set -x
            BRANCH_NAE=$(git rev-parse --abbrev-ref HEAD)
            SHA1_SHORT=$(git rev-parse --short HEAD)
            DATE=`date +%Y%m%d%H%M%S`
            if [[ ($BRANCH_NAE == "develop") ]]
            then
              BRANCH_NAE="dev"
              K8S_CLUSTER="stage.hub"
            elif [[ ($BRANCH_NAE == "master") ]]
            then
              BRANCH_NAE="stage"
              K8S_CLUSTER="hub"
            else
              BRANCH_NAE="feat"
              K8S_CLUSTER="dev.hub"
            fi
            docker build --no-cache -f Dockerfile -t $BRANCH_NAE .
            for TAG in $BRANCH_NAE $SHA1_SHORT $BRANCH_NAE$DATE; do
              docker tag $BRANCH_NAE $AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/dccn-es-api:$TAG
              docker push $AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/dccn-es-api:$TAG
            done
            kops export kubecfg --name ${K8S_CLUSTER}.k8s.ankr.network --state s3://kops.${K8S_CLUSTER}.config
            kubectl apply -f kubernetes/dccn-es-api-svc.yml

            kubectl set image dccn-es-api=$AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/dccn-es-api:${BRANCH_NAE}${DATE} --local -f kubernetes/dccn-es-api.yml -o yaml > kubernetes/dccn-es-api_patch.yml
            kubectl apply -f kubernetes/dccn-es-api_patch.yml
            if ! kubectl rollout status deploy/dccn-es-api --watch=true --timeout=60s; then
              echo "Deploy failed, roll back to previous version"
              kubectl rollout undo deploy/dccn-es-api
            fi
            kubectl get deployment -n logging
            kubectl get svc -n logging
            kubectl get pods -n logging
